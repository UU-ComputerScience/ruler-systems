--
-- Desugars and checks occurrences of identifiers
--

MODULE {Desugar} {desugar} {}

PRAGMA genlinepragmas

INCLUDE "FlatAst.ag"

optpragmas
{ {-# OPTIONS -XTypeOperators -XEmptyDataDecls #-} }

imports
{
import Common
import Type
import UU.Scanner.Position
import Flat
import qualified Simple as S
import Data.Sequence(Seq)
import qualified Data.Sequence as Seq
import Error
import qualified Data.Map as Map
import Data.Map(Map)
import qualified Data.Set as Set
import Data.Set(Set)
import SymbolTable
import Data.Monoid
}

WRAPPER Fag

{
desugar :: Fag -> Either Errs S.Sag
desugar ast = if Seq.null $ errs_Syn_Fag syn
              then Right $ fag_Syn_Fag syn
              else Left $ errs_Syn_Fag syn
  where
    inh = Inh_Fag {}
    sem = sem_Fag ast
    syn = wrap_Fag sem inh
}


ATTR Fag [ | | fag : {S.Sag} ]

SEM Fag
  | Ag
      lhs.fag  = S.Sag_Ag [] [] []


--
-- Distribute namespaces
--

{
data SpDatas
data SpCons

type NmSpaces = Spaces (SpDatas :+ SpCons :+ End) Key

data Key
  = KeyData Ident
  | KeyCon Ident
  deriving (Eq, Ord, Show)

spDatas :: SpaceId SpDatas
spDatas = SpaceId

spCons :: SpaceId SpCons
spCons = SpaceId
}

ATTR Datas Data Cons Con [ spaces : NmSpaces | | ]

SEM Fag | Ag  datas.spaces = initialSpaces
SEM Data | Data  loc.spaces = scope (KeyData @name) spDatas @lhs.spaces
SEM Con | Con    loc.spaces = scope (KeyCon @name) spCons @lhs.spaces


--
-- Check data types
--

{
data CatData = CatData
data CatCon  = CatCon

type SubTbl t a = InfoMap Item Ident t a
type TblType = CatData :@ SubTbl  -- data types
                  TblTypeDatas ()
               :+ End
type TblTypeDatas = CatCon :@ SubTbl  -- constructors
                      ( TblTypeCons
                      ) ()
                    :+ End
type TblTypeCons = End
type TblGath = TableGath Item Key TblType
type TblFin  = TableFin Item Key TblType
}

ATTR Datas Data Cons Con [ tblFin : TblFin | tblGath : TblGath | ]
ATTR Datas Data [ rootPath : {Path Item TblType TblType} | | ]

SEM Fag
  | Ag
      loc.rootPath = Path None
      datas.tblGath = tblGathEmpty
      (loc.tblFin, loc.finInfos) = finalize @datas.tblGath



SEM Data
  | Data
      loc.dataRef : {ItemRef Item TblTypeDatas () TblType}
      loc.dataRef = @lhs.rootPath .@ CatData .! @name
      
      (cons.tblGath, _) = apply (defValue @loc.dataRef (@lhs.spaces <! spDatas) () (Item_Data (identPos @name) @name))
                                @lhs.tblGath


--
-- Collect errors
--

ATTR Fag [ | | errs USE {Seq.><} {Seq.empty} : Errs ]
