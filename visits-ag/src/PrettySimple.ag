MODULE {PrettySimple} {ppSag} {}

PRAGMA genlinepragmas

INCLUDE "SimpleAst.ag"

imports
{
import Common
import UU.Scanner.Position
import Type
import UU.Pretty
import Simple
import Data.Char
}


WRAPPER Sag

{
ppSag :: Sag -> PP_Doc
ppSag vag = pp_Syn_Sag syn
  where
    inh = Inh_Sag {}
    sem = sem_Sag vag
    syn = wrap_Sag sem inh
}


ATTR Sag Data Con Sig Itf Ctx Block Code Clause Def Pat [ | | pp : PP_Doc ]

SEM Sag
  | Ag  lhs.pp = "-- data types"
                 >-< vlist_sep "" @datas.pps
                 >-< ""
                 >-< "-- interfaces"
                 >-< vlist_sep "" @itfs.pps
                 >-< ""
                 >-< vlist_sep "" @blocks.pps

SEM Data
  | Data  lhs.pp = "data" >#< @name >#< hlist_sp @vars
                   >-< indent 2 (vlist @cons.pps)

SEM Con
  | Con   lhs.pp = "|" >#< @name >#< (vlist @sigs.pps)

SEM Sig
  | Sig   lhs.pp = @name >#< "::" >#< @tp

SEM Itf
  | Itf   lhs.pp = "itf" >#< @name >#< hlist_sp @vars
                   >-< ( if null @inhs.pps
                         then empty
                         else indent 2 ("inh" >#< vlist @inhs.pps) )
                   >-< ( if null @ctxs.pps
                         then empty
                         else indent 2 (vlist @ctxs.pps) )

SEM Ctx
  | Ctx   lhs.pp = "ctx" >#< @name >#< (   ( if null @syns.pps
                                             then empty
                                             else "syn" >#< vlist @syns.pps )
                                       >-< case @mbTail of
                                             Nothing -> empty
                                             Just tp -> "tail" >#< tp
                                       )

SEM Block
  | Code  lhs.pp = if isInline @kind
                   then vlist @items.pps
                   else "-- code block" >#< @kind
                        >-< vlist @items.pps

SEM Code
  | Plain  lhs.pp = if all isSpace @txt
                    then empty
                    else ".." >#< trim @txt
  | Attr   lhs.pp = @name >|< "." >|< @field
  | Sem    lhs.pp = ppPos @pos
                    >-< "sem" >#< @tp
                    >-< indent 2 (vlist @clauses.pps)

{
trim :: String -> String
trim = reverse . dropWhile isSpace . reverse . dropWhile isSpace
}

SEM Clause
  | Clause  lhs.pp = "clause" >#< @name >#< ":" >#< @ctx
                     >-< indent 2 (vlist @defs.pps)

SEM Def
  | Child   lhs.pp  = "child" >#< @name >#< "::" >#< @tp >#< @def.pp
  | Visit   lhs.pp  = "visit" >#< @child >#< "::" >#< @visit >#< ":" >#< @ctx >#< "=" >#< @def.pp
  | Bind    lhs.pp  = @kind >#< @pat.pp >#< "=" >#< @def.pp
  | Tail    lhs.pp  = "tail" >#< @def.pp

SEM Pat
  | Attr        lhs.pp = @child >|< "." >|< @field
  | Con         lhs.pp = "(" >#< @name >#< hlist_sp @pats.pps >#< ")"
  | Tup         lhs.pp = "(" >#< hlist_sep ", " @pats.pps >#< ")"
  | Underscore  lhs.pp = pp "_"


--
-- List-like cases
--

ATTR Datas Cons Sigs Itfs Ctxs Blocks Codes Clauses Defs Pats [ | | pps : {[PP_Doc]} ]

SEM Datas
  | Cons  lhs.pps = @hd.pp : @tl.pps
  | Nil   lhs.pps = []

SEM Cons
  | Cons  lhs.pps = @hd.pp : @tl.pps
  | Nil   lhs.pps = []

SEM Sigs
  | Cons  lhs.pps = @hd.pp : @tl.pps
  | Nil   lhs.pps = []

SEM Itfs
  | Cons  lhs.pps = @hd.pp : @tl.pps
  | Nil   lhs.pps = []

SEM Ctxs
  | Cons  lhs.pps = @hd.pp : @tl.pps
  | Nil   lhs.pps = []

SEM Blocks
  | Cons  lhs.pps = @hd.pp : @tl.pps
  | Nil   lhs.pps = []

SEM Codes
  | Cons  lhs.pps = @hd.pp : @tl.pps
  | Nil   lhs.pps = []

SEM Clauses
  | Cons  lhs.pps = @hd.pp : @tl.pps
  | Nil   lhs.pps = []

SEM Defs
  | Cons  lhs.pps = @hd.pp : @tl.pps
  | Nil   lhs.pps = []

SEM Pats
  | Cons  lhs.pps = @hd.pp : @tl.pps
  | Nil   lhs.pps = []
