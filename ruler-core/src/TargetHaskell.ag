-- This file is included by Transform.ag
-- Based on the AST of AstAG.ag
-- Generates code for Haskell

SEM Program | Program
  +pp = if genHaskell @lhs.opts
        then (@loc.hpp >-<)
        else id


{
hItfNm nm = "I_" ++ show nm
hCoItfNm nm vis = hItfNm (mkCoIdent nm vis)
hItfVsNm nm vis = "I_" ++ show nm ++ "_" ++ show vis
hCoItfVsNm nm vis = hItfVsNm (mkCoIdent nm vis) vis
hNt x = "_nt_" ++ show x
hVis x = "_vis_" ++ show x
hSemNm k v = "_sem_" ++ show k ++ "_" ++ show v

hInp child name
  | show child == "loc" = show child ++ "L" ++ show name
  | show child == "lhs" = show child ++ "I" ++ show name
  | show child == "vis" = show child ++ "I" ++ show name
  | otherwise           = show child ++ "S" ++ show name

hOutp child name
  | show child == "loc" = show child ++ "L" ++ show name
  | show child == "lhs" = show child ++ "S" ++ show name
  | show child == "vis" = show child ++ "S" ++ show name
  | otherwise           = show child ++ "I" ++ show name

hInhFldNm nm itf vis = show nm ++ "_Inh_" ++ show itf ++ "_" ++ show vis
hSynFldNm nm itf vis = show nm ++ "_Syn_" ++ show itf ++ "_" ++ show vis
hCoInhFldNm nm itf vis = hInhFldNm nm (mkCoIdent itf vis) vis
hCoSynFldNm nm itf vis = hSynFldNm nm (mkCoIdent itf vis) vis

hInhDt itf vis = "Inh_" ++ show itf ++ "_" ++ show vis
hSynDt itf vis = "Syn_" ++ show itf ++ "_" ++ show vis
hCoInhDt itf vis = hInhDt (mkCoIdent itf vis) vis
hCoSynDt itf vis = hSynDt (mkCoIdent itf vis) vis

hInvNm itf nm = "invoke_" ++ show itf ++ "_" ++ show nm
hCoInvNm itf nm = "coinvoke_" ++ show itf ++ "_" ++ show nm
hNextNm itf nm = "next_" ++ show itf ++ "_" ++ show nm
hCurrentNm itf nm = "current_" ++ show itf ++ "_" ++ show nm
}


SEM Program | Program
  loc.hpp = vlist @blocks.hpps

ATTR Block Itf ItfVisit BoundCode Code Item SemVisit ClausesTop Clauses Clause Stmt Pat
  [ | | hpp : {PP_Doc} ]

SEM Block
  | Section  lhs.hpp = @code.hpp
  | Itf      lhs.hpp = @itf.hpp

SEM Itf
  | Itf      lhs.hpp = empty
  
             +hpp = ("type" >#< hItfNm @name >#< "m" >#< "=" >#< hItfVsNm @name @visits.firstVisit >#< "m") >-<
             +hpp = ("type" >#< hCoItfNm @name @visits.firstVisit >#< "m" >#< "=" >#< hCoItfVsNm @name @visits.firstVisit >#< "m") >-<
             +hpp = vlist @visits.hpps >-<

SEM ItfVisit
  | Visit    lhs.hpp      = empty
             loc.hConNm   = text $ hItfVsNm @loc.itfNm @name
             loc.hCoConNm = text $ hCoItfVsNm @loc.itfNm @name
             loc.hRepFld  = [ hSynFldNm repIdent @loc.itfNm @name >#< "::" >#< "!" >|< pp_parens (@loc.hConNm >#< "m") ]
             loc.hNextFld = maybe [] (\nm -> [ hSynFldNm nextIdent @loc.itfNm @name 
                                               >#< "::" >#< "!" >|< pp_parens (hItfVsNm @loc.itfNm nm >#< "m")]) @lhs.mbNextVisit
             loc.hArrTp   = hInhDt @loc.itfNm @name >#< "m" >#< "->" >#< "m" >#< pp_parens (hSynDt @loc.itfNm @name >#< "m")
             loc.hCoArrTp = hCoInhDt @loc.itfNm @name >#< "m" >#< "->" >#< "m" >#< pp_parens (hCoSynDt @loc.itfNm @name >#< "m")
             +hpp = ("newtype" >#< @loc.hConNm >#< "m" >#< "=" >#< @loc.hConNm >#< pp_parens @loc.hArrTp) >-<
             +hpp = ("newtype" >#< @loc.hCoConNm >#< "m" >#< "=" >#< @loc.hCoConNm >#< pp_parens @loc.hCoArrTp) >-<
             +hpp = ("data" >#< hInhDt @loc.itfNm @name >#< "m" >#< "=" >#< hInhDt @loc.itfNm @name
                            >#< pp_block "{" "}" "," @attrs.hInhDeclPPs) >-<
             +hpp = ("data" >#< hSynDt @loc.itfNm @name >#< "m" >#< "=" >#< hSynDt @loc.itfNm @name
                            >#< pp_block "{" "}" "," (@loc.hRepFld ++ @loc.hNextFld ++ @attrs.hSynDeclPPs)
                            ) >-<
             +hpp = ("data" >#< hCoInhDt @loc.itfNm @name >#< "m" >#< "=" >#< hCoInhDt @loc.itfNm @name
                             >#< pp_block "{" "}" "," @attrs.hCoInhDeclPPs) >-<
             +hpp = ("data" >#< hCoSynDt @loc.itfNm @name >#< "m" >#< "=" >#< hCoSynDt @loc.itfNm @name
                             >#< pp_block "{" "}" "," (
                                  (hCoSynFldNm repIdent @loc.itfNm @name >#< "::" >#< "!" >|< pp_parens (@loc.hCoConNm >#< "m"))
                                  : @attrs.hCoSynDeclPPs)
                             ) >-<
             
             +hpp = (hInvNm @loc.itfNm @name >#< "!" >|< pp_parens (@loc.hConNm >#< "__f") >#< "=" >#< "__f") >-<
             +hpp = (hCoInvNm @loc.itfNm @name >#< "!" >|< pp_parens (@loc.hCoConNm >#< "__f") >#< "=" >#< "__f") >-<
             +hpp = case @lhs.mbNextVisit of
                       Nothing -> id
                       Just v  -> ((hNextNm @loc.itfNm @name >#< "!" >|< pp_parens (
                                    hSynDt @loc.itfNm @name >#< pp_braces (
                                      hSynFldNm nextIdent @loc.itfNm @name >#< "=" >#< "__f")
                                  ) >#< "=" >#< "__f" >#< "--" >#< v) >-<)
             +hpp = ((hCurrentNm @loc.itfNm @name >#< "!" >|< pp_parens (
                      hSynDt @loc.itfNm @name >#< pp_braces (hSynFldNm repIdent @loc.itfNm @name >#< "=" >#< "__f")
                    ) >#< "=" >#< "__f") >-<)

{
nextIdent :: Ident
nextIdent = ident "next_"

repIdent :: Ident
repIdent = ident "rep_"
}

ATTR Attrs Attr [ | | hInhDeclPPs,hSynDeclPPs,hCoInhDeclPPs,hCoSynDeclPPs USE {++} {[]} : {[PP_Doc]}]

SEM Attr
  | Inh Syn  loc.hTpPP         = stripSpacing @type
  | Inh      loc.hFldNm        = hInhFldNm @name @loc.itfNm @loc.visNm
             lhs.hInhDeclPPs   = [@loc.hFldNm >#< "::" >#< "!" >|< pp_parens @loc.hTpPP]
  | Syn      loc.hFldNm        = hSynFldNm @name @loc.itfNm @loc.visNm
             lhs.hSynDeclPPs   = [@loc.hFldNm >#< "::" >#< "!" >|< pp_parens @loc.hTpPP]

  | Inh      loc.hCoFldNm      = hCoSynFldNm @name @loc.itfNm @loc.visNm
             lhs.hCoSynDeclPPs = [@loc.hCoFldNm >#< "::" >#< "!" >|< pp_parens @loc.hTpPP]
  | Syn      loc.hCoFldNm      = hCoInhFldNm @name @loc.itfNm @loc.visNm
             lhs.hCoInhDeclPPs = [@loc.hCoFldNm >#< "::" >#< "!" >|< pp_parens @loc.hTpPP]

{
stripSpacing :: String -> PP_Doc
stripSpacing = pp_block "(" ")" " " . map text . lines
}

SEM BoundCode
  | Code         lhs.hpp = if @bind.isFun
                           then "return" >#< "("
                                >-< @code.hpp
                                >-< ")"
                           else @code.hpp

ATTR Bind [ | | isFun : Bool ]
SEM Bind
  | Fun       lhs.isFun = True
  | Monadic   lhs.isFun = False

SEM Code
  | Code         lhs.hpp = vlist @items.hpps

SEM Item
  | Plain        lhs.hpp = vlist $ modifySpacing @loc.diff @lhs.indent @txt
  | Attr         lhs.hpp = addSpaces @loc.diff (text $ hInp @child @name)
  | Sem CoSem    lhs.hpp = addSpaces @loc.diff ( pp_parens (
                             "let" >#< hNt @name >#< "="
                             >-< indent 5 @first.hpp
                             >-< "in" >#< hNt @name ))
  | Detach       lhs.hpp = addSpaces @loc.diff (text $ hSemNm @name @visit)
  | Brackets     lhs.hpp = addSpaces @loc.diff (text "{")
                           >-< vlist @items.hpps
                           >-< addSpaces @loc.diff2 (text "}")

SEM SemVisit
  | Visit        loc.hChildren = hlist_sp [ hSemNm k v | (k, Just v) <- Map.assocs @loc.myNextVisits ]
                 loc.hChns     = [ text $ hInp visIdent nm | (nm,_) <- Map.assocs @attrs.gathVisitLocalAttrs ]
                 loc.hChnsOut  = [ text $ hOutp @name nm | (nm,_) <- Map.assocs @attrs.gathVisitLocalAttrs ]
                 loc.hInhPPs   = [ hInhFldNm nm @loc.itfNm @name >#< "=" >#< (hInp lhsIdent nm) | (nm,_) <- Map.assocs @loc.inhAttrMap ]
                 loc.hMatch    = pp_parens (hInhDt @loc.itfNm @name >#< pp_block "{" "}" "," @loc.hInhPPs)
                 lhs.hpp = pp_parens (
                             "let" >#< ( hVis @name >#< @loc.hChildren >#< @loc.hChns >#< @loc.hMatch
                                       >-< indent 2 (
                                         "=" >#< "do" >#< (
                                           vlist @stmts.hpps
                                           >-< @clauses.hpp
                                         ))
                                       )
                             >-< "in" >#< hItfVsNm @loc.itfNm @name >#<
                                   pp_parens (hVis @name >#< @loc.hChildren >#< @loc.hChnsOut)
                           )
  | End          lhs.hpp = pp_parens ("error" >#< show "there is no next visit")

SEM Clauses
  | Cons         lhs.hpp = pp_parens ("catch" >#< (pp_parens @hd.hpp >-< (pp_parens ("\\_ -> " >#< @tl.hpp))))
  | Nil          lhs.hpp = pp_parens ("fail" >#< show ("no applicable clause for " ++ show (head @lhs.itf) ++ "." ++ show @lhs.visit))

SEM Clause
  | Clause       loc.hChildren = hlist_sp [ hSemNm k v | (k, Just v) <- Map.assocs @lhs.myNextVisits ]
                 loc.hChns     = hlist_sp [ text $ hInp visIdent nm | (nm,_) <- Map.assocs @lhs.directVisitLocalAttrs ]
                 loc.hNext     = maybe [] (\nm -> [ hSynFldNm nextIdent @loc.itfNm @lhs.visit >#< "= _visNext" ]) @next.mbNextVisit
                 lhs.hpp = "do" >#< (
                             vlist @stmts.hpps
                             >-< [ hInp visIdent @lhs.visit >#< "=" >#< hOutp visIdent nm
                                 | (nm,_) <- Map.assocs @lhs.directVisitLocalAttrs ]
                             >-< "let" >#< ( "!" >|< 
                                       "_visRestart =" >#< hItfVsNm @loc.itfNm @lhs.visit
                                                       >#< pp_parens (hVis @lhs.visit >#< @loc.hChildren >#< @loc.hChns)
                                   >-< case @next.mbNextVisit of
                                         Nothing -> empty
                                         Just _  -> "!" >|< "_visNext" >#< "=" >#< @next.hpp
                                 )
                             >-< "return" >#< pp_parens (
                                   hSynDt @loc.itfNm @lhs.visit
                                   >#< pp_block "{" "}" "," ( [hSynFldNm repIdent @loc.itfNm @lhs.visit >#< "= _visRestart" ] ++
                                                              @loc.hNext ++
                                                              [ hSynFldNm nm @loc.itfNm @lhs.visit >#< "=" >#< hOutp lhsIdent nm
                                                              | (nm,_) <- Map.assocs @loc.synAttrMap ] ))
                           )

SEM Stmt
  | Eval         lhs.hpp = if @mode.isMatch
                           then ppBind @pat.hpp @code.hpp
                           else ppBind ("!" >|< "__fresh") @code.hpp
                                >-< "let" >#< pp_parens @pat.hpp >#< "= __fresh"
  | Attach       lhs.hpp = ppBind (hSemNm @name @visit) @code.hpp
  | Invoke       lhs.hpp   = ppBind @loc.hPat ("let" >#< @loc.hIter >-< "in" >#< @loc.hRhs)
                 loc.hIter = "__iter" >#< pp_parens (hItfVsNm @loc.unqualChildItf @visit >#< "__f")
                                      >#< @loc.hfInps
                             >-< indent 2 ( "=" >#< "do" >#< (
                                   "!" >|< ppBind (hCoItfVsNm @loc.unqualChildItf @visit >#< "!" >|< "__g") @code.hpp
                                   >-< ppBind ("!" >|< "__res@" >|< @loc.hfOuts) ("__f" >#< @loc.hfInps)
                                   >-< "catch" >#< (   pp_parens ( "do" >#< (
                                                         "!" >|< ppBind @loc.hgOuts ("__g" >#< @loc.hgInps)
                                                         >-< "__iter" >#< "__f" >#< @loc.hfInps
                                                       ))
                                                   >-< pp_parens (text "const (return __res)")
                                                   )
                                 ))
                 loc.hfInps = pp_parens (hInhDt @loc.unqualChildItf @visit >#< pp_block "{" "}" ","
                                [ hInhFldNm nm @loc.unqualChildItf @visit >#< "=" >#< hOutp @name nm
                                | (nm,_) <- Map.assocs @loc.inhAttrMap ] )
                 loc.hfOuts = pp_parens (hSynDt @loc.unqualChildItf @visit >#< pp_block "{" "}" ","
                                ( (hSynFldNm repIdent @loc.unqualChildItf @visit >#< "=" >#< "__f") :
                                [ hSynFldNm nm @loc.unqualChildItf @visit >#< "=" >#< hInp @name nm
                                | (nm,_) <- Map.assocs @loc.synAttrMap ] ))
                 loc.hgInps = pp_parens (hCoInhDt @loc.unqualChildItf @visit >#< pp_block "{" "}" ","
                                [ hCoInhFldNm nm @loc.unqualChildItf @visit >#< "=" >#< hInp @name nm
                                | (nm,_) <- Map.assocs @loc.synAttrMap ] )
                 loc.hgOuts = pp_parens (hCoSynDt @loc.unqualChildItf @visit >#< pp_block "{" "}" ","
                                [ hCoSynFldNm nm @loc.unqualChildItf @visit >#< "=" >#< hOutp @name nm
                                | (nm,_) <- Map.assocs @loc.inhAttrMap ] )
                 loc.hRhs  = "__iter" >#< hSemNm @name @visit >#< @loc.hfInps
                 loc.hPat  = pp_parens (
                               hSynDt @loc.unqualChildItf @visit >#< pp_block "{" "}" "," (
                                 ( maybe [] (\nm -> [ hSynFldNm nextIdent @loc.unqualChildItf @visit >#< "=" >#< hSemNm @name nm ])
                                   @loc.mbNextVisit) ++
                                 [ hSynFldNm nm @loc.unqualChildItf @visit >#< "=" >#< hInp @name nm
                                 | (nm,_) <- Map.assocs @loc.synAttrMap ]
                             ))

{
ppBind :: (PP a, PP b) => a -> b -> PP_Doc
ppBind pat expr = pp_parens (pp pat) >#< "<-" >-< indent 2 (pp_parens (pp expr))
}

ATTR Mode [ | | isMatch : Bool ]
SEM Mode
  | Match   lhs.isMatch = True
  | Assert  lhs.isMatch = False

SEM Pat
  | Con          lhs.hpp = "!" >|< pp_parens (@name >#< hlist_sp @pats.hpps)
  | Attr         lhs.hpp = "!" >|< hOutp @child @name
  | Tup          lhs.hpp = "!" >|< pp_block "(" ")" "," @pats.hpps
  | List         lhs.hpp = "!" >|< pp_block "[" "]" "," @pats.hpps
  | Cons         lhs.hpp = "!" >|< pp_parens (@hd.hpp >#< ":" >#< pp_parens @tl.hpp)
  | Underscore   lhs.hpp = "!" >|< text "_"

ATTR Blocks ItfVisits Items Stmts Pats
  [ | | hpps : {[PP_Doc]} ]

SEM Blocks
  | Cons  lhs.hpps = @hd.hpp : @tl.hpps
  | Nil   lhs.hpps = []

SEM ItfVisits
  | Cons  lhs.hpps = @hd.hpp : @tl.hpps
  | Nil   lhs.hpps = []

SEM Items
  | Cons  lhs.hpps = @hd.hpp : @tl.hpps
  | Nil   lhs.hpps = []

SEM Stmts
  | Cons  lhs.hpps = @hd.hpp : @tl.hpps
  | Nil   lhs.hpps = []

SEM Pats
  | Cons  lhs.hpps = @hd.hpp : @tl.hpps
  | Nil   lhs.hpps = []
